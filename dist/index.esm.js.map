{"version":3,"file":"index.esm.js","sources":["../src/index.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\n\nconst ChromaKeyVideo = ({ videoSrc, width = 1080, height = 1080, keyColor = '#00ff00', threshold = 0.4, suppressionRange = 0.1, transitionRange = 0.08, className = '', style = {}}) => {\n    const canvasRef = useRef(null);\n    const videoRef = useRef(null);\n\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        const video = videoRef.current;\n\n        if (!canvas || !video) return;\n\n        const gl = canvas.getContext('webgl');\n        if (!gl) {\n            console.error('WebGL not supported in this browser.');\n            return;\n        }\n\n\n        // Vertex shader source code\n        const vertexShaderSource = `\n            attribute vec4 a_position;\n            attribute vec2 a_texcoord;\n            varying vec2 v_texcoord;\n\n            void main() {\n                gl_Position = a_position;\n                v_texcoord = a_texcoord;\n            }\n        `;\n\n        // Convert hex color to RGB\n        const hexToRgb = (hex) => {\n            const bigint = parseInt(hex.slice(1), 16);\n            const r = (bigint >> 16) & 255;\n            const g = (bigint >> 8) & 255;\n            const b = bigint & 255;\n            return [r / 255, g / 255, b / 255];\n        };\n\n        const keyColorRGB = hexToRgb(keyColor);\n        const keyColorUV = [\n            keyColorRGB[0] * -0.169 + keyColorRGB[1] * -0.331 + keyColorRGB[2] * 0.5 + 0.5,\n            keyColorRGB[0] * 0.5 + keyColorRGB[1] * -0.419 + keyColorRGB[2] * -0.081 + 0.5\n        ];\n        // Fragment shader source code for green chroma removal\n        const fragmentShaderSource = `\n            precision highp float;\n            varying vec2 v_texcoord;\n            uniform sampler2D u_image;\n            vec2 RGBtoUV(vec3 rgb) {\n                return vec2(\n                    rgb.r * -0.169 + rgb.g * -0.331 + rgb.b *  0.5    + 0.5,\n                    rgb.r *  0.5   + rgb.g * -0.419 + rgb.b * -0.081  + 0.5\n                );\n            }\n            vec2 keyColorUV = vec2(${keyColorUV[0]}, ${keyColorUV[1]});\n            void main() {\n                vec4 rgba = texture2D(u_image, v_texcoord);\n                float chromaDist = distance(RGBtoUV(rgba.rgb), keyColorUV);\n                float baseMask = chromaDist - ${threshold};\n                float fullMask = pow(clamp(baseMask / ${transitionRange}, 0., 1.), 1.5);\n                rgba.a = fullMask;\n\n                float spillVal = pow(clamp(baseMask / ${suppressionRange}, 0., 1.), 1.5);\n                rgba.rgb *= spillVal;\n\n                gl_FragColor = rgba;\n            }\n        `;\n\n        // Utility function to create shader\n        function createShader(gl, type, source) {\n            const shader = gl.createShader(type);\n            gl.shaderSource(shader, source);\n            gl.compileShader(shader);\n            if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n                console.error(\"Shader compile failed with: \" + gl.getShaderInfoLog(shader));\n                gl.deleteShader(shader);\n                return null;\n            }\n            return shader;\n        }\n\n        // Utility function to create program\n        function createProgram(gl, vertexShader, fragmentShader) {\n            const program = gl.createProgram();\n            gl.attachShader(program, vertexShader);\n            gl.attachShader(program, fragmentShader);\n            gl.linkProgram(program);\n            if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n                console.error(\"Program link failed with: \" + gl.getProgramInfoLog(program));\n                return null;\n            }\n            return program;\n        }\n\n        // Create shaders and program\n        const vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\n        const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n        const program = createProgram(gl, vertexShader, fragmentShader);\n\n        // Look up the locations of the attributes and uniforms\n        const positionLocation = gl.getAttribLocation(program, \"a_position\");\n        const texcoordLocation = gl.getAttribLocation(program, \"a_texcoord\");\n\n        // Set up the rectangle that covers the entire canvas\n        const positionBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, 1]), gl.STATIC_DRAW);\n\n        // Set up the texture coordinates for the rectangle\n        const texcoordBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1]), gl.STATIC_DRAW);\n\n        const texture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, video);\n\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n\n        // Set up WebGL state\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n        gl.clearColor(0, 0, 0, 0);\n        gl.clear(gl.COLOR_BUFFER_BIT);\n\n        // Use the shader program\n        gl.useProgram(program);\n\n        // Bind the position buffer\n        gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n        gl.enableVertexAttribArray(positionLocation);\n        gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);\n\n        // Bind the texture coordinate buffer\n        gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);\n        gl.enableVertexAttribArray(texcoordLocation);\n        gl.vertexAttribPointer(texcoordLocation, 2, gl.FLOAT, false, 0, 0);\n\n        // Draw the rectangle\n        gl.drawArrays(gl.TRIANGLES, 0, 6);\n\n        const updateCanvas = () => {\n            // Create a texture from the image\n\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, video);\n            gl.drawArrays(gl.TRIANGLES, 0, 6);\n            video.requestVideoFrameCallback(updateCanvas);\n        };\n\n        video.addEventListener('play', () => {\n            updateCanvas();\n        });\n\n        // Clean up when component unmounts\n        return () => {\n            video.removeEventListener('play', updateCanvas);\n            gl.deleteProgram(program);\n            gl.deleteShader(vertexShader);\n            gl.deleteShader(fragmentShader);\n            gl.deleteBuffer(positionBuffer);\n            gl.deleteBuffer(texcoordBuffer);\n            gl.deleteTexture(texture);\n        };\n    }, [videoSrc]);\n\n    return (\n        <>\n            <canvas\n                ref={canvasRef}\n                width={width}\n                height={height}\n                className={className}\n                style={ style }\n            ></canvas>\n            <video\n                ref={videoRef}\n                src={videoSrc}\n                width={width}\n                height={height}\n                crossOrigin=\"anonymous\"\n                style={{ display: 'none' }}\n                loop\n                playsInline\n                autoPlay\n            />\n        </>\n    );\n};\n\nexport default ChromaKeyVideo;\n"],"names":["ChromaKeyVideo","_ref","videoSrc","_ref$width","width","_ref$height","height","_ref$keyColor","keyColor","_ref$threshold","threshold","_ref$suppressionRange","suppressionRange","_ref$transitionRange","transitionRange","_ref$className","className","_ref$style","style","canvasRef","useRef","videoRef","useEffect","canvas","current","video","gl","getContext","console","error","vertexShaderSource","hexToRgb","hex","bigint","parseInt","slice","r","g","b","keyColorRGB","keyColorUV","fragmentShaderSource","concat","createShader","type","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","createProgram","vertexShader","fragmentShader","program","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","VERTEX_SHADER","FRAGMENT_SHADER","positionLocation","getAttribLocation","texcoordLocation","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","texcoordBuffer","texture","createTexture","bindTexture","TEXTURE_2D","pixelStorei","UNPACK_FLIP_Y_WEBGL","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_MAG_FILTER","viewport","clearColor","clear","COLOR_BUFFER_BIT","useProgram","enableVertexAttribArray","vertexAttribPointer","FLOAT","drawArrays","TRIANGLES","updateCanvas","requestVideoFrameCallback","addEventListener","removeEventListener","deleteProgram","deleteBuffer","deleteTexture","React","createElement","Fragment","ref","src","crossOrigin","display","loop","playsInline","autoPlay"],"mappings":"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"}